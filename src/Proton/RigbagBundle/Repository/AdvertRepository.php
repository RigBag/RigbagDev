<?php

namespace Proton\RigbagBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{

	public function count() {
		
		$query = $this->createQueryBuilder('a')->getQuery();
		$result = $query->getResult();
		return count($result);
		
	}

	public function search( $q, $params = array() )
	{
		extract( $params );


		if( isset( $circles ) && is_array( $circles ) && !count( $circles ) ) {
			return array();
		}

		if( !isset( $states ) || !is_array( $states ) || !count( $states ) ) {
			$states	= array( 'enabled' );
		}

		$query	= $this->createQueryBuilder('a');
	

		// STATES
		if( !in_array( 'all', $states ) ) {
			$exp	= '(';
			foreach( $states as $k => $v ) {
				if( $k ) {
					$exp .= ' OR ';
				}
				$exp .= 'a.state=:state' . $k;
			}
			$exp .= ')';
	
			$query 	= $query->where( $exp );
			foreach( $states as $k => $v ) {
				$query->setParameter( 'state' . $k, $v );
			}
		}

		// QUERY
		if( strlen( $q ) ) {
			$exp	= 	'(' . $query->expr()->like( 'a.title', ':q1' );
			$exp	.= 	' OR ' . $query->expr()->like( 'a.location', ':q2' );
			$exp	.= 	' OR ' . $query->expr()->like( 'a.swap_for', ':q3' ) . ')';
			$query->andWhere( $exp );
			$query->setParameter( 'q1', '%' . $q . '%' );
			$query->setParameter( 'q2', '%' . $q . '%' );
			$query->setParameter( 'q3', '%' . $q . '%' );
		}

		// MODE
		if( isset( $mode ) && strlen( $mode ) ) {
			$query->andWhere( 'a.mode=:mode1' );
			$query->setParameter( 'mode1', $mode );
		}

		// USER
		if( isset( $userId ) && $userId ) {
			$query->andWhere( 'a.user_id=' . $userId );
		}


		// CIRCLES
		if( isset( $circles ) && is_array( $circles ) && count( $circles ) ) {
			$query->join( 'a.circles', 'c' );
			$query->andWhere( 'c.id IN (' . implode( ',', $circles ) . ')' );
		}

		$query->groupBy( 'a.id' );

		// LIMITS
		if( isset( $fromId ) && $fromId ) {
			$query->andWhere( 'a.id<' . $fromId );
		}
		if( isset( $offset ) ) {
			$query->setFirstResult( $offset );
		}
		if( isset( $limit ) ) {
			$query->setMaxResults( $limit );
		}

		// EXECUTE
		$query->addOrderBy('a.created_at', 'DESC');


		return $query->getQuery()->getResult();
	}

	public function findForUser( $userId, $state = null ) {

		if( $userId ) {
			$query = $this->createQueryBuilder('j')
								->where('j.user_id = :userId')
								->setParameter('userId', $userId );

			$query->addOrderBy('j.created_at', 'DESC');

			return $query->getQuery()->getResult();
		}
		return array();

	}

	public function findAll( $mode = null, $stateExclude = null ) {

		$query = $this->createQueryBuilder('e')
							->orderBy('e.created_at', 'DESC');

		if( !is_null( $mode ) ) {
			$query->andWhere( 'e.mode=:mode' )
				->setParameter( 'mode', $mode );
		}
		if( !is_null( $stateExclude ) ) {
			$query->andWhere( 'e.state!=:stateExclude' )
						->setParameter( 'stateExclude', $stateExclude );
		}

		$query = $query->getQuery();

		return $query->getResult();

	}
}
