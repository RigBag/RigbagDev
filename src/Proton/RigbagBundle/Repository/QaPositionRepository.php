<?php

namespace Proton\RigbagBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * QaPositionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QaPositionRepository extends EntityRepository
{

	public function findMessagesToUser( $userId, $type = 'all' )
	{
		$qb	= $this->createQueryBuilder('q');
		$query = $qb->where( 'q.to_user_id=:userId' );

		if( $type == 'unreaded' ) {
				$query->andWhere( '(q.readed IS NULL OR q.readed=0)' );
		}
	//	$query->setParameter( 'userId2', $userId );
		$query->setParameter( 'userId', $userId );
		$query->addOrderBy('q.created_at', 'DESC');
		$query->setMaxResults( 20 );

		return $query->getQuery()->getResult();
	}

	public function hasAdvertAcceptedSwapOrFree( $advertId )
	{
		$swap = $this->findOneBy( array( 'advert_id' => $advertId, 'state' => 'swap_accepted' ) );

		if( $swap ) {
			return true;
		}

		$free = $this->findOneBy( array( 'advert_id' => $advertId, 'state' => 'free_accepted' ) );

		if( $free ) {
			return true;
		}
		return false;
	}

	public function findForAdvert( $advertId, $params = array() ) {

		extract( $params );
		
		if( !isset( $forceUser ) ) {
			$forceUser = false;
		}
		if( !isset( $withChildren ) ) {
			$withChildren = false;
		}
		
		$qb	= $this->createQueryBuilder('q');
		$query = $qb->where( 'q.advert_id=:advertId' );
		
		if( !$withChildren ) {
			$query->andWhere( 'q.parent_id IS NULL' );
		}
		
		$query->andWhere( '(q.state=:state1 OR q.state=:state2 OR q.state=:state3 OR q.state=:state4 OR q.state=:state5 OR q.state=:state6 OR q.state=:state7)' );

		if( !$ownAdvert ) {
			$query->andWhere( '( q.user_id=:userId OR q.to_user_id=:userId2 )');
			$query->setParameter( 'userId', $userId );
			$query->setParameter( 'userId2', $userId );
		}
		
		if( isset( $new ) && $new ) {
			$query->andWhere( 'q.readed!=1' );
		}

		$query->setParameter( 'advertId', $advertId );
		$query->setParameter( 'state1', 'private' );
		$query->setParameter( 'state2', 'swap_suggest' );
		$query->setParameter( 'state3', 'swap_rejected' );
		$query->setParameter( 'state4', 'swap_accepted' );
		$query->setParameter( 'state5', 'free_suggest' );
		$query->setParameter( 'state6', 'free_rejected' );
		$query->setParameter( 'state7', 'free_accepted' );
		$query->addOrderBy('q.created_at', 'DESC');



		return $query->getQuery()->getResult();
	}

	public function findUserThreads( $userId ) {

		$qb	= $this->createQueryBuilder('q');

		$query 	= 	$qb->where( 'q.state=:state' );
		$exp	= 	'(q.parent_id IS NULL AND q.user_id=' . $userId;
		$exp	.= 	') OR (q.id IN (SELECT q1.parent_id FROM Proton\RigbagBundle\Entity\QaPosition q1 WHERE q1.state=:state1 AND q1.parent_id IS NOT NULL AND q1.user_id=' . $userId . '))';

		$query->andWhere(
				$exp
		);

		$query->setParameter( 'state', 'public' );
		$query->setParameter( 'state1', 'public' );

		$query->groupBy( 'q.id' );
		$query->addOrderBy('q.updated_at', 'DESC');


		return $query->getQuery()->getResult();
	}

	public function search( $q, $params = array() ) {

		extract( $params );


		if( isset( $circles ) && is_array( $circles ) && !count( $circles ) ) {
			return array();
		}

		$qb	= $this->createQueryBuilder('q');

		$exp	= 	'(q.parent_id IS NULL AND ';
		$exp	.=	$qb->expr()->like( 'q.body', ':q' ) . ( isset( $userId ) ? ' AND q.user_id=' . $userId : '' );
		$exp	.= ') OR (q.id IN (SELECT q1.parent_id FROM Proton\RigbagBundle\Entity\QaPosition q1 WHERE q1.state=:state1' . ( isset( $userId ) ? ' AND q1.user_id=' . $userId : '' ) . ' AND q1.parent_id IS NOT NULL AND ' . $qb->expr()->like( 'q1.body', ':q1' ) . '))';

		$query = $qb->where( 'q.state=:state' );

		if( isset( $circles ) && is_array( $circles ) && count( $circles ) ) {
			$query->andWhere('q.circle_id IN (' . implode( ',', $circles ) . ')');
		}

		$query->andWhere(
								$exp
							);


		$query->setParameter( 'state', 'public' );
		$query->setParameter( 'state1', 'public' );

			$query->setParameter( 'q', '%' . $q . '%' );
			$query->setParameter( 'q1', '%' . $q . '%' );


		if( isset( $limit ) ) {
			$query->setMaxResults( $limit );
		}
		if( isset( $offset ) ) {
			$query->setFirstResult( $offset );
		}

		$query->groupBy( 'q.id' );
		$query->addOrderBy('q.updated_at', 'DESC');


		return $query->getQuery()->getResult();
	}

	public function findForUser( $userId, $circleId = null ) {

		if( $userId ) {
			$ids	= array();
			if( $circleId ) {
				$ids[]	= $circleId;
			}
			return $this->findForUserCircles( $userId, $ids );
		}
		return array();

	}

	public function findForUserCircles( $userId, $circlesIds = array() ) {

		if( $userId ) {

			$user		= $this->getEntityManager()->find( 'Proton\RigbagBundle\Entity\User', $userId );

			if(  !count( $circlesIds ) ) {
				$circles	= $user->getCircles();
				$circlesIds	= array();

				foreach( $circles as $c ) {
					$circlesIds[]	= $c->getId();
				}
			}

			$query = $this->createQueryBuilder('j')
							->where('j.parent_id IS NULL')
							->andWhere( '(j.state=:state)' )
							->andWhere( 'j.circle_id IN (:circleIds)')
							->setParameter('circleIds', implode( ',', $circlesIds ) )
							->setParameter('state', 'public' )
							->groupBy( 'j.id' );


			$query->addOrderBy('j.updated_at', 'DESC');


			$result = $query->getQuery()->getResult();

			return $result;
		}
		return array();

	}
}
